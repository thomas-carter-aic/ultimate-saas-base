{{- range $serviceName, $service := .Values.services }}
{{- if $service.enabled }}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ $service.name }}
  namespace: {{ $.Release.Namespace }}
  labels:
    app.kubernetes.io/name: {{ $service.name }}
    app.kubernetes.io/instance: {{ $.Release.Name }}
    app.kubernetes.io/version: {{ $.Chart.AppVersion }}
    app.kubernetes.io/component: {{ $serviceName }}
    app.kubernetes.io/part-of: ultimate-saas-platform
    app.kubernetes.io/managed-by: {{ $.Release.Service }}
spec:
  replicas: {{ $service.replicas }}
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ $service.name }}
      app.kubernetes.io/instance: {{ $.Release.Name }}
  template:
    metadata:
      labels:
        app.kubernetes.io/name: {{ $service.name }}
        app.kubernetes.io/instance: {{ $.Release.Name }}
        app.kubernetes.io/version: {{ $.Chart.AppVersion }}
        app.kubernetes.io/component: {{ $serviceName }}
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "{{ $service.port }}"
        prometheus.io/path: "/metrics"
        checksum/config: {{ include (print $.Template.BasePath "/configmap.yaml") $ | sha256sum }}
    spec:
      serviceAccountName: {{ include "platform.serviceAccountName" $ }}
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        fsGroup: 2000
      containers:
        - name: {{ $service.name }}
          image: "{{ $.Values.image.registry }}/{{ $.Values.image.repository }}/{{ $service.image.repository }}:{{ $service.image.tag | default $.Values.image.tag }}"
          imagePullPolicy: {{ $.Values.image.pullPolicy }}
          ports:
            - name: http
              containerPort: {{ $service.targetPort }}
              protocol: TCP
            - name: metrics
              containerPort: 9090
              protocol: TCP
          env:
            {{- range $key, $value := $service.env }}
            - name: {{ $key }}
              value: {{ $value | quote }}
            {{- end }}
            - name: DB_HOST
              value: {{ include "platform.postgresql.fullname" $ }}
            - name: DB_PORT
              value: "5432"
            - name: DB_NAME
              value: {{ $.Values.postgresql.auth.database }}
            - name: DB_USER
              value: "postgres"
            - name: DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ include "platform.postgresql.secretName" $ }}
                  key: postgres-password
            - name: REDIS_HOST
              value: {{ include "platform.redis.fullname" $ }}-master
            - name: REDIS_PORT
              value: "6379"
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ include "platform.redis.secretName" $ }}
                  key: redis-password
            - name: KAFKA_BROKER
              value: {{ include "platform.kafka.fullname" $ }}:9092
            - name: JWT_SECRET
              valueFrom:
                secretKeyRef:
                  name: {{ include "platform.fullname" $ }}-secrets
                  key: jwt-secret
          envFrom:
            - configMapRef:
                name: {{ include "platform.fullname" $ }}-config
          livenessProbe:
            httpGet:
              path: /health
              port: http
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 3
          readinessProbe:
            httpGet:
              path: /health
              port: http
            initialDelaySeconds: 5
            periodSeconds: 5
            timeoutSeconds: 3
            failureThreshold: 3
          resources:
            {{- toYaml $service.resources | nindent 12 }}
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            capabilities:
              drop:
                - ALL
          volumeMounts:
            - name: tmp
              mountPath: /tmp
            - name: var-cache
              mountPath: /var/cache
            - name: var-log
              mountPath: /var/log
            {{- if eq $serviceName "aiService" }}
            - name: model-cache
              mountPath: /app/models
            {{- end }}
            {{- if eq $serviceName "pluginService" }}
            - name: plugin-storage
              mountPath: /app/plugins
            {{- end }}
      volumes:
        - name: tmp
          emptyDir: {}
        - name: var-cache
          emptyDir: {}
        - name: var-log
          emptyDir: {}
        {{- if eq $serviceName "aiService" }}
        - name: model-cache
          emptyDir:
            sizeLimit: 10Gi
        {{- end }}
        {{- if eq $serviceName "pluginService" }}
        - name: plugin-storage
          emptyDir:
            sizeLimit: 5Gi
        {{- end }}
      {{- with $.Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- if and (eq $serviceName "aiService") $.Values.services.aiService.gpu.enabled }}
      nodeSelector:
        {{- toYaml $.Values.services.aiService.gpu.nodeSelector | nindent 8 }}
      {{- end }}
      {{- with $.Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with $.Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- if $.Values.global.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml $.Values.global.imagePullSecrets | nindent 8 }}
      {{- end }}
{{- end }}
{{- end }}
