# Docker Compose for Local Development
# This file sets up the complete development environment including
# all infrastructure services and the AI-native SaaS platform services

version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: saas-postgres
    environment:
      POSTGRES_DB: saas_platform
      POSTGRES_USER: saas_user
      POSTGRES_PASSWORD: saas_password
      POSTGRES_MULTIPLE_DATABASES: user_service,tenant_service,plugin_service
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-databases.sh:/docker-entrypoint-initdb.d/init-databases.sh:ro
    networks:
      - saas-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U saas_user -d saas_platform"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: saas-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - saas-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Apache Kafka
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: saas-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - saas-network

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: saas-kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "9094:9094"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_METRIC_REPORTERS: io.confluent.metrics.reporter.ConfluentMetricsReporter
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS: kafka:29092
      KAFKA_CONFLUENT_METRICS_REPORTER_TOPIC_REPLICAS: 1
      KAFKA_CONFLUENT_METRICS_ENABLE: 'true'
      KAFKA_CONFLUENT_SUPPORT_CUSTOMER_ID: anonymous
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
    networks:
      - saas-network
    healthcheck:
      test: ["CMD", "kafka-broker-api-versions", "--bootstrap-server", "localhost:9092"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Kafka UI for development
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: saas-kafka-ui
    depends_on:
      - kafka
    ports:
      - "8080:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
    networks:
      - saas-network

  # Keycloak for Authentication
  keycloak:
    image: quay.io/keycloak/keycloak:22.0
    container_name: saas-keycloak
    environment:
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
      KC_DB: postgres
      KC_DB_URL: jdbc:postgresql://postgres:5432/keycloak
      KC_DB_USERNAME: saas_user
      KC_DB_PASSWORD: saas_password
      KC_HOSTNAME: localhost
      KC_HOSTNAME_PORT: 8090
      KC_HOSTNAME_STRICT_HTTPS: false
      KC_HTTP_ENABLED: true
    ports:
      - "8090:8080"
    depends_on:
      postgres:
        condition: service_healthy
    command: start-dev
    networks:
      - saas-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8080/health/ready || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Prometheus for Metrics
  prometheus:
    image: prom/prometheus:latest
    container_name: saas-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - saas-network

  # Grafana for Dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: saas-grafana
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: admin
      GF_USERS_ALLOW_SIGN_UP: false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./config/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./config/grafana/dashboards:/var/lib/grafana/dashboards:ro
    networks:
      - saas-network
    depends_on:
      - prometheus

  # Jaeger for Distributed Tracing
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: saas-jaeger
    ports:
      - "16686:16686"
      - "14268:14268"
    environment:
      COLLECTOR_OTLP_ENABLED: true
    networks:
      - saas-network

  # Ollama for Local AI
  ollama:
    image: ollama/ollama:latest
    container_name: saas-ollama
    ports:
      - "11434:11434"
    volumes:
      - ollama_data:/root/.ollama
    networks:
      - saas-network
    environment:
      OLLAMA_HOST: 0.0.0.0
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:11434/api/tags"]
      interval: 30s
      timeout: 10s
      retries: 5

  # User Service
  user-service:
    build:
      context: ./services/user-service
      dockerfile: Dockerfile
    container_name: saas-user-service
    ports:
      - "3001:3001"
    environment:
      NODE_ENV: development
      PORT: 3001
      DATABASE_HOST: postgres
      DATABASE_PORT: 5432
      DATABASE_NAME: user_service
      DATABASE_USER: saas_user
      DATABASE_PASSWORD: saas_password
      DATABASE_SSL: false
      DATABASE_MAX_CONNECTIONS: 20
      KAFKA_BROKERS: kafka:29092
      KAFKA_CLIENT_ID: user-service
      KAFKA_SSL: false
      AWS_REGION: us-east-1
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID:-}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY:-}
      LOG_LEVEL: debug
      LOG_FORMAT: json
      CORS_ORIGINS: http://localhost:3000,http://localhost:8080
      OTEL_EXPORTER_JAEGER_ENDPOINT: http://jaeger:14268/api/traces
      OTEL_SERVICE_NAME: user-service
      OTEL_SERVICE_VERSION: 1.0.0
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - saas-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Tenant Service
  tenant-service:
    build:
      context: ./services/tenant-service
      dockerfile: Dockerfile
    container_name: saas-tenant-service
    ports:
      - "3002:3002"
    environment:
      NODE_ENV: development
      PORT: 3002
      DATABASE_HOST: postgres
      DATABASE_PORT: 5432
      DATABASE_NAME: tenant_service
      DATABASE_USER: saas_user
      DATABASE_PASSWORD: saas_password
      DATABASE_SSL: false
      DATABASE_MAX_CONNECTIONS: 20
      KAFKA_BROKERS: kafka:29092
      KAFKA_CLIENT_ID: tenant-service
      KAFKA_SSL: false
      AWS_REGION: us-east-1
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID:-}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY:-}
      STRIPE_SECRET_KEY: ${STRIPE_SECRET_KEY:-sk_test_dummy}
      STRIPE_WEBHOOK_SECRET: ${STRIPE_WEBHOOK_SECRET:-whsec_dummy}
      LOG_LEVEL: debug
      LOG_FORMAT: json
      CORS_ORIGINS: http://localhost:3000,http://localhost:8080
      OTEL_EXPORTER_JAEGER_ENDPOINT: http://jaeger:14268/api/traces
      OTEL_SERVICE_NAME: tenant-service
      OTEL_SERVICE_VERSION: 1.0.0
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - saas-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3002/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Plugin Service (placeholder for future implementation)
  plugin-service:
    image: nginx:alpine
    container_name: saas-plugin-service
    ports:
      - "3003:80"
    networks:
      - saas-network
    volumes:
      - ./config/nginx-placeholder.conf:/etc/nginx/conf.d/default.conf:ro

  # AI Service (placeholder for future implementation)
  ai-service:
    image: nginx:alpine
    container_name: saas-ai-service
    ports:
      - "3004:80"
    networks:
      - saas-network
    volumes:
      - ./config/nginx-placeholder.conf:/etc/nginx/conf.d/default.conf:ro

  # Notification Service (placeholder for future implementation)
  notification-service:
    image: nginx:alpine
    container_name: saas-notification-service
    ports:
      - "3005:80"
    networks:
      - saas-network
    volumes:
      - ./config/nginx-placeholder.conf:/etc/nginx/conf.d/default.conf:ro

  # API Gateway (Kong)
  kong-database:
    image: postgres:13-alpine
    container_name: saas-kong-db
    environment:
      POSTGRES_DB: kong
      POSTGRES_USER: kong
      POSTGRES_PASSWORD: kong
    volumes:
      - kong_data:/var/lib/postgresql/data
    networks:
      - saas-network

  kong-migration:
    image: kong:3.4
    container_name: saas-kong-migration
    command: kong migrations bootstrap
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-database
      KONG_PG_DATABASE: kong
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: kong
    depends_on:
      - kong-database
    networks:
      - saas-network

  kong:
    image: kong:3.4
    container_name: saas-kong
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-database
      KONG_PG_DATABASE: kong
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: kong
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_ADMIN_LISTEN: 0.0.0.0:8001
      KONG_ADMIN_GUI_URL: http://localhost:8002
    ports:
      - "8000:8000"
      - "8001:8001"
      - "8002:8002"
      - "8443:8443"
      - "8444:8444"
    depends_on:
      - kong-migration
    networks:
      - saas-network
    healthcheck:
      test: ["CMD", "kong", "health"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Plugin Service
  plugin-service:
    build:
      context: ./services/plugin-service
      dockerfile: Dockerfile
    container_name: saas-plugin-service
    ports:
      - "3003:3003"
    environment:
      NODE_ENV: development
      PORT: 3003
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: saas_platform
      DB_USER: saas_user
      DB_PASSWORD: saas_password
      KAFKA_BROKERS: kafka:29092
      REDIS_HOST: redis
      REDIS_PORT: 6379
      AWS_REGION: ${AWS_REGION:-us-east-1}
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      S3_BUCKET: ${S3_BUCKET:-plugin-storage-bucket}
      JAEGER_ENDPOINT: http://jaeger:14268/api/traces
      LOG_LEVEL: debug
      CORS_ORIGINS: http://localhost:3000,http://localhost:8080
      OTEL_EXPORTER_JAEGER_ENDPOINT: http://jaeger:14268/api/traces
      OTEL_SERVICE_NAME: plugin-service
      OTEL_SERVICE_VERSION: 1.0.0
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - saas-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3003/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    volumes:
      - plugin_storage:/app/plugins

networks:
  saas-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  ollama_data:
    driver: local
  kong_data:
    driver: local
  plugin_storage:
    driver: local
